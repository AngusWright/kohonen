suppressMessages(require("RColorBrewer", quietly = TRUE))
suppressMessages(require("grid", quietly = TRUE))
suppressMessages(require("latticeExtra", quietly = TRUE))
suppressMessages(require("kohonen", quietly = TRUE))

## ----functionDefs,echo=FALSE------------------------------------------------------------
source("plot.picture.R")

## ----loadData,echo=FALSE----------------------------------------------------------------
load("picture_10039.RData")
X <- picture[,c("red", "green", "blue")]
Y <- factor(picture[,"truth"])
classes <- c("background", "leaves", "peppers", "peduncles", "stems",
             "sideshoots", "wires", "cuts")
levels(Y) <- classes
coords <- cbind(rep(1:800, each = 600), rep(1:600, 800))
colnames(coords) <- c("x", "y")

imdata <- list("rgb" = X, "truth" = Y, "coords" = coords)

## ----somSegm,echo=FALSE-----------------------------------------------------------------
mygrid <- somgrid(4, 8, "hexagonal")
if (!file.exists("simplesom.RData")) {
  set.seed(15)
  somsegm1 <- supersom(imdata, whatmap = c("rgb", "coords"),
                       user.weights = c(1, 9),
                       grid = mygrid)
  predictions <- predict(somsegm1)
  save(somsegm1, predictions, file = "simplesom.RData")
} else {
  load("simplesom.RData")
}

## ----segmSOM,echo=FALSE,fig.height=3.8,fig.width=10,out.width='1.0\\textwidth'----------
reconstrIm <- predict(somsegm1, newdata = imdata)
X60 <- reconstrIm$predictions[["rgb"]]

plot.picture(X, x = unit(.025, "npc"), just = "left", width = unit(.45, "npc"))
plot.picture(X60, x = unit(.525, "npc"), 
             just = "left", width = unit(.45, "npc"))

## ----makePlots,echo=FALSE---------------------------------------------------------------
rgbpalette <- function(n) {
  if (n != 3) stop("Hey! Count again!")
  c("red", "green", "blue")
}
truthpredictions <-
  classmat2classvec(predictions$unit.predictions$truth)
trclasses <- levels(truthpredictions)
trclasses[!(trclasses %in% c("leaves", "peppers"))] <- "other"
levels(truthpredictions) <- trclasses
pepperunits <- which(truthpredictions == "peppers")

cluscolors <- brewer.pal(nlevels(truthpredictions), "Set3")
unitcols <- cluscolors[as.integer(truthpredictions)]

plot(somsegm1, "codes", whatmap = "rgb", bgcol = unitcols, 
     palette.name = rgbpalette, main = "")
idx <- (0:7)*4 + 1
text(somsegm1$grid$pts[idx,1] - .5, somsegm1$grid$pts[idx,2], 
     labels = idx, pos = 2)
add.cluster.boundaries(somsegm1, truthpredictions)
legend("top", legend = rev(levels(truthpredictions)), bty="n",
       pch = rep(21, 3), pt.bg = rev(cluscolors), ncol = 3)

plot(somsegm1$codes[["coords"]][,1], 
     max(somsegm1$codes[["coords"]][,2]) - somsegm1$codes[["coords"]][,2],
     pch = 21, cex = 3, axes = FALSE, xlab = "", ylab = "",
     bg = rgb(somsegm1$codes[["rgb"]][,1],
                          somsegm1$codes[["rgb"]][,2],
                          somsegm1$codes[["rgb"]][,3], maxColorValue = 255))
text(somsegm1$codes[["coords"]][,1],
     max(somsegm1$codes[["coords"]][,2]) - 
     somsegm1$codes[["coords"]][,2],
     col = (1:nrow(somsegm1$codes[["coords"]]) %in% pepperunits) + 1,
     labels = 1:nrow(somsegm1$codes[["coords"]]), pos = 1, offset = .8)
box()

oneclass <- rep(1, 480000)
for (ii in seq(along = pepperunits))
  oneclass[predictions$unit.classif == pepperunits[ii]] <- ii + 1
myim <- data.frame(truth = oneclass)
classcols <- c("lightgray", brewer.pal(length(pepperunits), "Set1"))
plot.picture(myim, what = "truth", mycols = classcols,
             truth.levels = c("other units", paste("unit", pepperunits)),
             scales = list(draw = FALSE))

## ----doProfiling,echo=FALSE-------------------------------------------------------------
if (!file.exists("somProf.out")) {
  system("R CMD BATCH --no-save profsom.R")
}
if (!file.exists("parProf.out")) {
  system("R CMD BATCH --no-save profpar.R")
}
if (!file.exists("batchProf.out")) {
  system("R CMD BATCH --no-save profbatch.R")
}
if (!file.exists("pbatch8Prof.out")) {
  system("R CMD BATCH --no-save profpbatch8.R")
}
if (!file.exists("pbatch7Prof.out")) {
  system("R CMD BATCH --no-save profpbatch7.R")
}
if (!file.exists("pbatch6Prof.out")) {
  system("R CMD BATCH --no-save profpbatch6.R")
}
if (!file.exists("pbatch5Prof.out")) {
  system("R CMD BATCH --no-save profpbatch5.R")
}
if (!file.exists("pbatch4Prof.out")) {
  system("R CMD BATCH --no-save profpbatch4.R")
}
if (!file.exists("pbatch3Prof.out")) {
  system("R CMD BATCH --no-save profpbatch3.R")
}
if (!file.exists("pbatch2Prof.out")) {
  system("R CMD BATCH --no-save profpbatch2.R")
}
if (!file.exists("pbatch1Prof.out")) {
  system("R CMD BATCH --no-save profpbatch1.R")
}

if (!file.exists("sommapProf.out")) {
  system("R CMD BATCH --no-save profsommap.R")
}
if (!file.exists("parmapProf.out")) {
  system("R CMD BATCH --no-save profparmap.R")
}

memResults <- 
  rbind(summaryRprof("somProf.out", memory = "both")[[2]][1,],
        summaryRprof("parProf.out", memory = "both")[[2]][1,],
        summaryRprof("batchProf.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch1Prof.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch2Prof.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch3Prof.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch4Prof.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch5Prof.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch6Prof.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch7Prof.out", memory = "both")[[2]][1,],
        summaryRprof("pbatch8Prof.out", memory = "both")[[2]][1,],
        summaryRprof("sommapProf.out", memory = "both")[[2]][1,],
        summaryRprof("parmapProf.out", memory = "both")[[2]][1,])
memResults <- memResults[,-c(2,4,5)]
SOMversion <- c("online v.2", "online v.3", "batch v.3", 
             "pbatch v.3 (1)", "pbatch v.3 (2)",
             "pbatch v.3 (3)", "pbatch v.3 (4)",
             "pbatch v.3 (5)", "pbatch v.3 (6)",
             "pbatch v.3 (7)", "pbatch v.3 (8)",
             "mapping v.2", "mapping v.3")
memResults$mode <- factor(SOMversion, levels = SOMversion)
memResults$what <- factor(rep(c("training", "mapping"), c(11,2)), 
                          levels = c("training", "mapping"))

## ----speedBenchmarks,echo=FALSE---------------------------------------------------------
if (!file.exists("speedBenchmarks.RData")) {
  system("R CMD BATCH --no-save speedBenchmarks.R")
} else {
  load("speedBenchmarks.RData")
  load("speedBenchmarksWithNAs.RData")
}

training <- do.call(rbind, lapply(speedresult, "[[", 1))
npixels <- as.numeric(sapply(strsplit(rownames(training), "\\."), "[[", 1))
training$npixels <- factor(npixels, levels = sort(unique(npixels)))
levels(training$expr) <-  SOMversion[1:11]
training$time <- training$time / 1e9 

trainingNA <- do.call(rbind, lapply(speedresultNA, "[[", 1))
npixelsNA <- as.numeric(sapply(strsplit(rownames(trainingNA), "\\."), "[[", 1))
trainingNA$npixels <- factor(npixelsNA, levels = sort(unique(npixelsNA)))
trainingNA$time <- trainingNA$time / 1e9 
levels(trainingNA$expr) <-  SOMversion[2:11]

v2.idx <- grep("v.2", training$expr)
trainingNA <- rbind(trainingNA, training[v2.idx,])
trainingNA$expr <- factor(trainingNA$expr, levels = SOMversion[1:11])

mapping <-  do.call(rbind, lapply(speedresult, "[[", 2))
mapping$npixels <-
  factor(sapply(strsplit(rownames(mapping), "\\."), "[[", 1),
         levels = sort(unique(npixels)))
levels(mapping$expr) <-  c("   map v2.0", "   map v3.0")
mapping$time <- mapping$time / 1e9

## ----speedTest,echo=FALSE,fig.height=7.5,fig.width=10,out.width = '.96\\textwidth'------
mp <- dotplot(mode ~ mem.total | what, data = memResults, scale = "free",
              xlab = "Memory usage (Mb)")
pl1 <- bwplot(expr ~ time | npixels, data = trainingNA, 
              layout = c(5,1), main = "Training", xlab = "Time (s)",
              panel = panel.violin, scale = list(x = "free"))
pl2 <- bwplot(expr ~ time | npixels, data = mapping, 
              layout = c(5,1), main = "Mapping", xlab = "Time (s)",
              panel = panel.violin, scale = list(x = "free"))
print(mp, position = c(0.15, .64, .85, 1), more = TRUE)
print(pl1, position = c(0, .25, 1, .64), more = TRUE)
print(pl2, position = c(0, 0, 1, .22))

## ----BCdissim, echo=TRUE, size='footnotesize'-------------------------------------------
BCcode <- '
  #include <Rcpp.h>
  typedef double (*DistanceFunctionPtr)(double *, double *, int, int);
  
  double brayCurtisDissim(double *data, double *codes, int n, int nNA) {
    if (nNA > 0) return NA_REAL;

    double num = 0.0, denom = 0.0;
    for (int i = 0; i < n; i++) {
        num += std::abs(data[i] - codes[i]);
        denom += data[i] + codes[i];
    }
 
    return num/denom;
  }

  // [[Rcpp::export]]
  Rcpp::XPtr<DistanceFunctionPtr> BrayCurtis() {
    return Rcpp::XPtr<DistanceFunctionPtr>(new DistanceFunctionPtr(&brayCurtisDissim));
  } '

## ----veganExample, echo=TRUE------------------------------------------------------------
data("varespec", package = "vegan")
data("varechem", package = "vegan")
chemmat <- scale(as.matrix(varechem))
specmat <- as.matrix(varespec)

library("Rcpp")
sourceCpp(code = BCcode)

set.seed(343)
varesom <- supersom(list(species = specmat, soil = chemmat), 
                    somgrid(4, 3, "hexagonal"),
                    dist.fcts = c("BrayCurtis", "sumofsquares"))

## ----predictKohonen,echo=TRUE-----------------------------------------------------------
set.seed(141)
newsites <- apply(varechem, 2, function(x) sample(x, 5))
newmat <- scale(newsites, 
                attr(chemmat, "scaled:center"),
                attr(chemmat, "scaled:scale"))
somPredictions <- predict(varesom, 
                          newdata = list(soil = newmat))

## ----showPredictions,echo=TRUE----------------------------------------------------------
somPredictions$predictions$species[,1:5]

## ----setSeed,echo=FALSE-----------------------------------------------------------------
if (!file.exists("wccSOMmap.RData")) {
  data("degelder")
  mydata <- list(patterns = degelder$patterns,
                 CellVol = log(degelder$properties[,"cell.vol"]))
  sourceCpp("wcc.cpp")
  set.seed(7)
  powsom <- supersom(data = mydata,
                     grid = somgrid(6, 4, "hexagonal"),
                     dist.fcts = c("WCCd", "sumofsquares"),
                     keep.data = TRUE)
  save(powsom, file = "wccSOMmap.RData")
} else {
  data("degelder")
  mydata <- list(patterns = degelder$patterns,
                 CellVol = log(degelder$properties[,"cell.vol"]))
  sourceCpp("wcc.cpp")
  load("wccSOMmap.RData")
}

## ----WCCpatterns,echo=FALSE,fig.height=4.5,fig.width=12---------------------------------
par(mfrow = c(1,2))
plot(powsom, type = "codes", bgcol = "lightblue", 
     main = c("Diffraction patterns", "Cell volume"))

## ----predictVol,echo=TRUE---------------------------------------------------------------
cellPreds <- predict(powsom, newdata = mydata, whatmap = "patterns")
names(cellPreds)
cellPreds$predictions$CellVol[1:5,]

